--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -3471,6 +3470,28 @@ void ppp_update_stats(struct net_device *dev, unsigned long rx_packets,
 	ppp_recv_unlock(ppp);
 }
 
+/* Returns true if Compression is enabled on PPP device
+ */
+bool ppp_is_cp_enabled(struct net_device *dev)
+{
+	struct ppp *ppp;
+	bool flag = false;
+
+	if (!dev)
+		return false;
+
+	if (dev->type != ARPHRD_PPP)
+		return false;
+
+	ppp = netdev_priv(dev);
+	ppp_lock(ppp);
+	flag = !!(ppp->xstate & SC_COMP_RUN) || !!(ppp->rstate & SC_DECOMP_RUN);
+	ppp_unlock(ppp);
+
+	return flag;
+}
+EXPORT_SYMBOL(ppp_is_cp_enabled);
+
 /* Returns >0 if the device is a multilink PPP netdevice, 0 if not or < 0 if
  * the device is not PPP.
  */
@@ -3497,6 +3518,32 @@ int ppp_is_multilink(struct net_device *dev)
 }
 EXPORT_SYMBOL(ppp_is_multilink);
 
+/* __ppp_is_multilink()
+ *	Returns >0 if the device is a multilink PPP netdevice, 0 if not or < 0
+ *	if the device is not PPP. Caller should acquire ppp_lock before calling
+ *	this function
+ */
+int __ppp_is_multilink(struct net_device *dev)
+{
+	struct ppp *ppp;
+	unsigned int flags;
+
+	if (!dev)
+		return -1;
+
+	if (dev->type != ARPHRD_PPP)
+		return -1;
+
+	ppp = netdev_priv(dev);
+	flags = ppp->flags;
+
+	if (flags & SC_MULTILINK)
+		return 1;
+
+	return 0;
+}
+EXPORT_SYMBOL(__ppp_is_multilink);
+
 /* ppp_channel_get_protocol()
  *	Call this to obtain the underlying protocol of the PPP channel,
  *	e.g. PX_PROTO_OE
@@ -3601,6 +3660,59 @@ int ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[],
 }
 EXPORT_SYMBOL(ppp_hold_channels);
 
+/* __ppp_hold_channels()
+ *	Returns the PPP channels of the PPP device, storing each one
+ *	into channels[].
+ *
+ * channels[] has chan_sz elements.
+ * This function returns the number of channels stored, up to chan_sz.
+ * It will return < 0 if the device is not PPP.
+ *
+ * You MUST acquire ppp_lock and  release the channels using
+ * ppp_release_channels().
+ */
+int __ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[],
+			unsigned int chan_sz)
+{
+	struct ppp *ppp;
+	int c;
+	struct channel *pch;
+
+	if (!dev)
+		return -1;
+
+	if (dev->type != ARPHRD_PPP)
+		return -1;
+
+	ppp = netdev_priv(dev);
+
+	c = 0;
+	list_for_each_entry(pch, &ppp->channels, clist) {
+		struct ppp_channel *chan;
+
+		if (!pch->chan) {
+			/* Channel is going / gone away*/
+			continue;
+		}
+		if (c == chan_sz) {
+			/* No space to record channel */
+			return c;
+		}
+
+		/* Hold the channel, if supported */
+		chan = pch->chan;
+		if (!chan->ops->hold)
+			continue;
+
+		chan->ops->hold(chan);
+
+		/* Record the channel */
+		channels[c++] = chan;
+	}
+	return c;
+}
+EXPORT_SYMBOL(__ppp_hold_channels);
+
 /* ppp_release_channels()
  *	Releases channels
  */
@@ -3678,6 +3762,7 @@ EXPORT_SYMBOL(ppp_unregister_channel);
 EXPORT_SYMBOL(ppp_channel_index);
 EXPORT_SYMBOL(ppp_unit_number);
 EXPORT_SYMBOL(ppp_dev_name);
+
 EXPORT_SYMBOL(ppp_input);
 EXPORT_SYMBOL(ppp_input_error);
 EXPORT_SYMBOL(ppp_output_wakeup);
--- a/include/linux/ppp_channel.h
+++ b/include/linux/ppp_channel.h
@@ -19,6 +19,12 @@
 #include <linux/skbuff.h>
 #include <linux/poll.h>
 #include <net/net_namespace.h>
+#include <linux/ppp_defs.h>
+#include <linux/notifier.h>
+
+/* PPP channel connection event types */
+#define PPP_CHANNEL_DISCONNECT	0
+#define PPP_CHANNEL_CONNECT	1
 
 struct ppp_channel;
 
@@ -61,6 +67,9 @@ struct ppp_channel {
  */
 extern int ppp_channel_get_protocol(struct ppp_channel *);
 
+/* Call this get protocol version */
+extern int ppp_channel_get_proto_version(struct ppp_channel *);
+
 /* Call this to hold a channel */
 extern bool ppp_channel_hold(struct ppp_channel *);
 
@@ -71,23 +80,27 @@ extern void ppp_channel_release(struct ppp_channel *);
 extern void ppp_release_channels(struct ppp_channel *channels[],
 				 unsigned int chan_sz);
 
-/* Test if ppp xmit lock is locked */
-extern bool ppp_is_xmit_locked(struct net_device *dev);
-
-/* Call this get protocol version */
-extern int ppp_channel_get_proto_version(struct ppp_channel *);
-
-/* Get the device index  associated with a channel, or 0, if none */
-extern int ppp_dev_index(struct ppp_channel *);
-
 /* Hold PPP channels for the PPP device */
 extern int ppp_hold_channels(struct net_device *dev,
 			     struct ppp_channel *channels[],
 			     unsigned int chan_sz);
 
+/* Test if ppp xmit lock is locked */
+extern bool ppp_is_xmit_locked(struct net_device *dev);
+
+/* Hold PPP channels for the PPP device */
+extern int __ppp_hold_channels(struct net_device *dev,
+			       struct ppp_channel *channels[],
+			       unsigned int chan_sz);
+
+bool ppp_is_cp_enabled(struct net_device *dev);
+
 /* Test if the ppp device is a multi-link ppp device */
 extern int ppp_is_multilink(struct net_device *dev);
 
+/* Test if the ppp device is a multi-link ppp device */
+extern int __ppp_is_multilink(struct net_device *dev);
+
 /* Update statistics of the PPP net_device by incrementing related
  * statistics field value with corresponding parameter
  */
@@ -120,12 +133,21 @@ extern void ppp_unregister_channel(struct ppp_channel *);
 /* Get the channel number for a channel */
 extern int ppp_channel_index(struct ppp_channel *);
 
+/* Get the device index  associated with a channel, or 0, if none */
+extern int ppp_dev_index(struct ppp_channel *);
+
 /* Get the unit number associated with a channel, or -1 if none */
 extern int ppp_unit_number(struct ppp_channel *);
 
 /* Get the device name associated with a channel, or NULL if none */
 extern char *ppp_dev_name(struct ppp_channel *);
 
+/* Register the PPP channel connect notifier */
+extern void ppp_channel_connection_register_notify(struct notifier_block *nb);
+
+/* Unregister the PPP channel connect notifier */
+extern void ppp_channel_connection_unregister_notify(struct notifier_block *nb);
+
 /*
  * SMP locking notes:
  * The channel code must ensure that when it calls ppp_unregister_channel,
@@ -135,17 +157,5 @@ extern char *ppp_dev_name(struct ppp_channel *);
  * that ppp_unregister_channel returns.
  */
 
-/* QCA NSS Clients Support - Start */
-/* PPP channel connection event types */
-#define PPP_CHANNEL_DISCONNECT	0
-#define PPP_CHANNEL_CONNECT	1
-
-/* Register the PPP channel connect notifier */
-extern void ppp_channel_connection_register_notify(struct notifier_block *nb);
-
-/* Unregister the PPP channel connect notifier */
-extern void ppp_channel_connection_unregister_notify(struct notifier_block *nb);
-/* QCA NSS Clients Support - End */
-
 #endif /* __KERNEL__ */
 #endif
